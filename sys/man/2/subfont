.TH SUBFONT 2
.SH NAME
allocsubfont, freesubfont, installsubfont, lookupsubfont, uninstallsubfont, subfontname, readsubfont, readsubfonti, writesubfont, stringsubfont, strsubfontwidth, mkfont \- subfont manipulation
.SH SYNOPSIS
.B #include <u.h>
.br
.B #include <libc.h>
.br
.B #include <draw.h>
.PP
.ta \w'\fLSubfont* 'u
.B
Subfont*	allocsubfont(char *name, int n, int height, int ascent,
.br
.B
	Fontchar *info, Image *i)
.PP
.B
void	freesubfont(Subfont *f)
.PP
.B
void	installsubfont(char *name, Subfont *f)
.PP
.B
Subfont*	lookupsubfont(Subfont *f)
.PP
.B
void	uninstallsubfont(Subfont *f)
.PP
.B
Subfont*	readsubfont(Display *d, char *name, int fd, int dolock)
.PP
.B
Subfont*	readsubfonti(Display *d, char *name, int fd, Image *im,
.br
.B
	  int dolock)
.PP
.B
int	writesubfont(int fd, Subfont *f)
.PP
.B
Point	stringsubfont(Image *dst, Point p, Image *src,
.br
.B
	Subfont *f, char *str)
.PP
.B
Point	strsubfontwidth(Subfont *f, char *s)
.PP
.B
Font*	mkfont(Subfont *f, Rune min)
.SH DESCRIPTION
.B "Understanding Subfonts"
.PP
Subfonts are the building blocks of Plan 9's font system. While a complete
.I font
describes how to display all the characters you might need, a 
.I subfont
contains the actual bitmap images for a specific range of characters.
.PP
Think of it this way:
.IP \(bu 3
A 
.B font
is like a book's table of contents - it tells you where to find things
.IP \(bu
A
.B subfont
is like a chapter - it contains the actual content (character images)
.PP
This separation allows Plan 9 to efficiently handle large character sets like
Unicode by loading only the character ranges you actually use.
.PP
.B "Subfont Structure"
.PP
Every subfont contains:
.IP "1." 4
.B "Character images"
- A bitmap showing all characters side by side
.IP "2."
.B "Metrics data"  
- Information about each character's size and positioning
.IP "3."
.B "Font properties"
- Overall height, ascent, and character count
.PP
Subfonts are the components of fonts that hold the character images.
A font comprises an array of subfonts; see
.IR cachechars (2)
for the detailed technical implementation.
.PP
.B "Creating and Managing Subfonts"
.PP
.B Subfont
is created and initialized with
.IR allocsubfont .
This function takes several parameters that define the subfont:
.TP
.B name
Identifies the subfont in the cache system
.TP
.B n
Number of characters in this subfont
.TP
.B height  
Total character height in pixels
.TP
.B ascent
Distance from top of character to baseline
.TP
.B info
Array of character metrics (see
.IR cachechars (2)
for the 
.B Fontchar
structure)
.TP
.B i
Image containing all character bitmaps
.PP
The function registers the image as a subfont with the graphics system and
returns a pointer to the new
.B Subfont
structure, or 0 on failure.
.PP
.B "Memory Management"
.PP
.I Freesubfont
frees a subfont and all its associated structures, including the
associated image. 
.B Important:
Since
.I freesubfont
calls
.I free
on the
.BR f->info
field, if this field was not allocated by
.IR malloc (2)
(for example, if it points to static data), you should set it to zero 
before calling
.IR freesubfont
to avoid memory corruption.
.PP
.B "Subfont File Naming Convention"
.PP
Subfont files follow a standard naming pattern:
.P1
/lib/font/bit/[fontname]/[class].[size][.depth]
.P2
.TP
.B class
Describes the character range: 
.BR ascii ,
.BR latin1 ,
.BR greek ,
.BR cyrillic ,
etc.
.TP
.B size  
Approximate height in pixels of lowercase letters (without ascenders/descenders)
.TP
.B depth
Bit depth - omitted if there's only one version
.PP
Examples:
.P1
/lib/font/bit/lucidasans/ascii.8     - 8pt ASCII characters
/lib/font/bit/times/greek.12         - 12pt Greek characters  
/lib/font/bit/pelm/kanji.16.1        - 16pt Kanji, 1-bit depth
.P2
.PP
.B "Subfont Caching System"
.PP
Plan 9 implements an intelligent caching system for subfonts:
.IP \(bu 3
Subfonts shared between fonts are loaded only once
.IP \(bu
The cache stores subfonts by name for quick retrieval
.IP \(bu
Programs can explicitly manage the cache when needed
.PP
.I Installsubfont
stores subfont
.I f
in the cache under the given
.IR name ,
typically the filename from which it was read.
This makes the subfont available for future use without reloading.
.PP
.I Uninstallsubfont
removes the subfont from the cache, freeing the memory.
Use this when you're sure the subfont won't be needed again.
.PP
.I Lookupsubfont
searches the cache for a subfont with the given
.I name
and returns it, or nil if not found.
This is much faster than reading from disk.
.PP
.I Subfontname
is used to locate subfonts given their names within the fonts.
The default version constructs a name given the
.IR cfname ,
its name within the font,
.IR fname ,
the name of the font, and the maximum depth suitable for this subfont.
This interface allows a partially specified name within a font to be resolved
at run-time to the name of a file holding a suitable subfont.
Although it is principally a routine internal to the library,
.I subfontname
may be substituted by the application to provide a less file-oriented subfont naming scheme.
.PP
The format of a subfont file is described in
.IR font (6).
Briefly, it contains a image with all the characters in it,
followed by a subfont header, followed by character information.
.I Readsubfont
reads a subfont from the file descriptor
.IR fd .
The
.I name
is used to identify the font in the cache.
The
.I dolock
argument specifies whether the routine should synchronize
use of the
.I Display
with other processes; for single-threaded applications it may
always be zero.
.I Readsubfonti
does the same for a subfont whose associated image is already in memory; it is passed as the
argument
.IR im .
In other words,
.I readsubfonti
reads only the header and character information from the file descriptor.
.PP
.I Writesubfont
writes on
.I fd
the part of a subfont file that comes after the image.  It should be preceded by
a call to
.IR writeimage
(see
.IR allocimage (2)).
.PP
.I Stringsubfont
is analogous to
.B string
(see
.IR draw (2))
for subfonts.  Rather than use the underlying font caching primitives,
it calls
.B draw
for each character.
It is intended for stand-alone environments such as operating system kernels.
.I Strsubfontwidth
returns the width of the string
.I s
in
as it would appear if drawn with
.I stringsubfont
in
.B Subfont
.BR f .
.PP
.I Mkfont
takes a single
.B Subfont
.I f
and creates a complete
.B Font  
that maps the character images in the subfont to Unicode values
starting from
.I min
and extending to
.IB min + f ->n-1\f1.
This is useful for creating simple fonts from single subfonts.
.SH EXAMPLES
.B "Basic Subfont Operations:"
.PP
Load a subfont from disk:
.P1
Subfont *sf;
sf = readsubfont(display, "ascii", fd, 1);
if(sf == nil)
    sysfatal("can't load subfont: %r");
.P2
.PP
Create a subfont programmatically:
.P1
Fontchar info[128];
Image *img;
Subfont *sf;

/* ... set up img and info ... */
sf = allocsubfont("mysubfont", 128, 16, 12, info, img);
installsubfont("mysubfont", sf);
.P2
.PP
.B "Working with Subfont Cache:"
.PP
Check if a subfont is already cached:
.P1
Subfont *sf = lookupsubfont("ascii.12");
if(sf == nil) {
    /* Not cached, need to load it */
    fd = open("/lib/font/bit/lucidasans/ascii.12", OREAD);
    sf = readsubfont(display, "ascii.12", fd, 1);
    close(fd);
}
.P2
.PP
Remove a subfont from cache when done:
.P1
uninstallsubfont(sf);
freesubfont(sf);
.P2
.PP
.B "Creating Simple Fonts:"
.PP
Convert a subfont to a complete font:
.P1
Subfont *sf;
Font *font;

sf = readsubfont(display, "ascii", fd, 1);
font = mkfont(sf, 0x20);  /* Start at space character */
/* Now you can use font with string(), etc. */
.P2
.PP
.B "Direct Character Drawing:"
.PP
Draw text using subfont directly (useful in kernels):
.P1
Point p = Pt(10, 50);
p = stringsubfont(screen, p, display->black, subfont, "Hello");
.P2
.PP
Calculate text width before drawing:
.P1
Point size = strsubfontwidth(subfont, "Hello World");
if(size.x > screenwidth)
    print("Text too wide for screen\\n");
.P2
.PP
.B "Error Handling:"
.PP
Always check for errors when working with subfonts:
.P1
Subfont *sf = readsubfont(display, name, fd, 1);
if(sf == nil) {
    fprint(2, "Failed to load subfont %s: %r\\n", name);
    return -1;
}
/* Use subfont... */
freesubfont(sf);
.P2
.SH FILES
.TF /lib/font/bit
.TP
.B /lib/font/bit
bitmap font file tree
.SH SOURCE
.B /sys/src/libdraw
.SH SEE ALSO
.IR graphics (2),
.IR allocimage (2),
.IR draw (2),
.IR cachechars (2),
.IR image (6),
.IR font (6)
.SH DIAGNOSTICS
All of the functions use the graphics error function (see
.IR graphics (2)).
